generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  // output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cart {
  id              Int       @id @default(autoincrement())
  userId          Int
  state           State     @default(PENDING)
  user            User      @relation(fields: [userId], references: [id])
  items           CartItem[]
  couponCode      String?
  address         String? // <-- Add this line
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model CartItem {
  id              Int       @id @default(autoincrement())
  cartId          Int
  ClothesId       Int
  sizeId          Int
  totalprice      Float     @default(0)
  quantity        Int
  Clothes         Clothes      @relation(fields: [ClothesId], references: [id])
  Size            Size         @relation(fields: [sizeId], references: [id])
  cart            Cart      @relation(fields: [cartId], references: [id])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Comment{
  id              Int       @id @default(autoincrement())
  userId          Int
  ClothesId       Int
  content         String    @db.VarChar(1024)
  rating          Int
  user            User      @relation(fields: [userId], references: [id])
  Clothes        Clothes   @relation(fields: [ClothesId], references: [id])
}

model Coupon{
  id              Int       @id @default(autoincrement())
  couponCode            String    @unique
  description     String    @db.VarChar(1024) 
  discount        Float
  expiryDate      DateTime
  isActive        Boolean   @default(true)
  stock           Int       @default(0) // Number of times this coupon can be used
  transactions    Transaction[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Clothes {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String    @db.VarChar(1024) 
  price       Float
  material    String?   @db.VarChar(255)
  information String?   @db.VarChar(1024)
  mainImgId   Int?      @unique
  cartItems   CartItem[]
  Comments    Comment[]
  categoryId  Int       
  category    Category  @relation(fields: [categoryId], references: [id])

  mainImg     Image?    @relation(fields: [mainImgId], references: [id], name: "MainImage", onDelete: Cascade, onUpdate: Cascade)
  extraImgs   Image[]   @relation(name: "ExtraImages")
  transactionDetails TransactionDetail[]
  sizes       Size[]
  features    Feature[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Size {
  id         Int      @id @default(autoincrement())
  label      String   // ví dụ "M", "L", "XL"
  quantity   Int
  clothesId  Int
  clothes    Clothes  @relation(fields: [clothesId], references: [id], onDelete: Cascade)
  transactionDetails TransactionDetail[]
  cartItems  CartItem[]
}

model Feature {
  id         Int      @id @default(autoincrement())
  value      String   // ví dụ "Cotton 100%"
  clothesId  Int
  clothes    Clothes  @relation(fields: [clothesId], references: [id], onDelete: Cascade)
}


model Image {
  id         Int      @id @default(autoincrement()) // Primary key
  name       String
  url        String   @db.VarChar(500) @unique
  ClothesMain   Clothes?    @relation(name: "MainImage")
  ClothesExtras Clothes[]   @relation(name: "ExtraImages")
  Notice Notice[]
}


model Category{
  id              Int       @id @default(autoincrement())
  name            String    @unique
  Clothes         Clothes[]
}

model User {
  id              Int       @id @default(autoincrement())
  name            String    
  email           String    @unique
  password        String    @db.VarChar(1024)
  phone           String    
  address         String    @db.VarChar(1024)
  role            Role      @default(USER)
  carts           Cart[]
  comments        Comment[]
  shippings       Shipping[]
  transactions    Transaction[]
  notices         Notice[]
  updatedAt       DateTime  @updatedAt
  createdAt       DateTime  @default(now())
  otpCode         String?
  otpExpiry       DateTime?
  isVerified      Boolean   @default(false)
}

model Shipping{
  id              Int       @id @default(autoincrement())
  address         String    @db.VarChar(1024)
  userId          Int
  transId         Int       @unique
  State           State     @default(PENDING)
  user            User      @relation(fields: [userId], references: [id])
  transaction     Transaction @relation(fields: [transId], references: [id])


}

model Transaction{
  id              Int       @id @default(autoincrement())
  amount          Float
  method          String
  userId          Int
  couponCode      String?
  user            User      @relation(fields: [userId], references: [id])
  coupon          Coupon?   @relation(fields: [couponCode], references: [couponCode])
  transactionDetails TransactionDetail[]
  shipping        Shipping[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum Role {
  ADMIN
  HOST
  USER
}

enum State {
  ORDERED
  PENDING
  SHIPPING
  COMPLETE
}

model TransactionDetail {
  id             Int          @id @default(autoincrement())
  transactionId  Int
  clothesId      Int
  sizeId         Int
  quantity       Int
  price          Float
  transaction    Transaction  @relation(fields: [transactionId], references: [id])
  clothes        Clothes      @relation(fields: [clothesId], references: [id])
  size           Size         @relation(fields: [sizeId], references: [id])
  createdAt      DateTime     @default(now())
}

model Notice {
  id        Int   @id @default(autoincrement())
  title     String
  subtitle  String?  
  content   String
  imageId   Int?
  image     Image?   @relation(fields: [imageId], references: [id])
  pages     Json
  userId    Int      // <-- Add this line
  user      User?  @relation(fields: [userId], references: [id])
  state     Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Log {
  id        Int   @id @default(autoincrement())
  userId    Int
  userName  String
  action    String
  createdAt DateTime @default(now())
}

